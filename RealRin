local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local TS = game:GetService("TweenService")

local gui = Instance.new("ScreenGui")
gui.ResetOnSpawn = false
gui.Name = "RinHubUI"
gui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

-- Main Frame
local main = Instance.new("Frame")
main.Size = UDim2.new(0, 200, 0, 200)
main.Position = UDim2.new(0.5, -100, 0.5, -100)
main.BackgroundColor3 = Color3.fromRGB(3, 244, 202)
main.BorderSizePixel = 0
main.Parent = gui
Instance.new("UICorner", main).CornerRadius = UDim.new(0, 10)

-- Stroke
local stroke = Instance.new("UIStroke")
stroke.Color = Color3.fromRGB(9, 255, 182)
stroke.Thickness = 2
stroke.Transparency = 0.3
stroke.Parent = main

-- Background (For effect under contentFrame)
local bg = Instance.new("Frame")
bg.Size = UDim2.new(1, -10, 1, -40)
bg.Position = UDim2.new(0, 5, 0, 35)
bg.BackgroundColor3 = Color3.fromRGB(9, 255, 182)
bg.BorderSizePixel = 0
bg.Parent = main
Instance.new("UICorner", bg).CornerRadius = UDim.new(0, 6)

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundTransparency = 1
titleBar.Parent = main

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -60, 1, 0)
title.Position = UDim2.new(0, 10, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Rin Hub"
title.TextColor3 = Color3.fromRGB(0, 0, 0)
title.TextSize = 16
title.Font = Enum.Font.GothamBold
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

-- Minimize Button
local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Size = UDim2.new(0, 25, 0, 25)
minimizeBtn.Position = UDim2.new(1, -55, 0, 2)
minimizeBtn.AnchorPoint = Vector2.new(1, 0)
minimizeBtn.BackgroundColor3 = Color3.fromRGB(3, 244, 202)
minimizeBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
minimizeBtn.Text = "_"
minimizeBtn.Font = Enum.Font.GothamBold
minimizeBtn.TextSize = 18
minimizeBtn.Parent = titleBar
Instance.new("UICorner", minimizeBtn).CornerRadius = UDim.new(0, 6)

-- Exit Button
local exitBtn = Instance.new("TextButton")
exitBtn.Size = UDim2.new(0, 25, 0, 25)
exitBtn.Position = UDim2.new(1, -25, 0, 2)
exitBtn.AnchorPoint = Vector2.new(1, 0)
exitBtn.BackgroundColor3 = Color3.fromRGB(3, 244, 202)
exitBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
exitBtn.Text = "X"
exitBtn.Font = Enum.Font.GothamBold
exitBtn.TextSize = 14
exitBtn.Parent = titleBar
Instance.new("UICorner", exitBtn).CornerRadius = UDim.new(0, 6)

-- Content Frame (all toggles inside here)
local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, -10, 1, -40)
contentFrame.Position = UDim2.new(0, 5, 0, 35)
contentFrame.BackgroundTransparency = 1
contentFrame.Parent = main

-- Auto layout the toggles
local layout = Instance.new("UIListLayout")
layout.Padding = UDim.new(0, 10)
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Parent = contentFrame

-- Function to create toggles
local function makeToggle(text)
    local base = Instance.new("Frame")
    base.Size = UDim2.new(0.9, 0, 0, 30)
    base.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black base
    base.BorderSizePixel = 0
    Instance.new("UICorner", base).CornerRadius = UDim.new(0, 6)
    base.Parent = contentFrame

    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 40, 0, 20)
    btn.Position = UDim2.new(1, -45, 0.5, -10)
    btn.AnchorPoint = Vector2.new(1, 0.5)
    btn.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black off
    btn.Text = ""
    btn.Parent = base
    Instance.new("UICorner", btn).CornerRadius = UDim.new(1, 0)

    local dot = Instance.new("Frame")
    dot.Size = UDim2.new(0, 16, 0, 16)
    dot.Position = UDim2.new(0, 2, 0.5, -8)
    dot.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    dot.Parent = btn
    Instance.new("UICorner", dot).CornerRadius = UDim.new(1, 0)

    local txt = Instance.new("TextLabel")
    txt.Size = UDim2.new(1, -55, 1, 0)
    txt.Position = UDim2.new(0, 10, 0, 0)
    txt.BackgroundTransparency = 1
    txt.Text = text
    txt.TextColor3 = Color3.fromRGB(255, 255, 255)
    txt.TextSize = 14
    txt.Font = Enum.Font.Gotham
    txt.TextXAlignment = Enum.TextXAlignment.Left
    txt.Parent = base

    local on = false
    btn.MouseButton1Click:Connect(function()
        on = not on
        TS:Create(btn, TweenInfo.new(0.2), {
            BackgroundColor3 = on and Color3.fromRGB(0, 255, 127) or Color3.fromRGB(0, 0, 0)
        }):Play()
        TS:Create(dot, TweenInfo.new(0.2), {
            Position = on and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        }):Play()
    end)
end

-- Create toggles
makeToggle("Freeze Trade")
makeToggle("Auto Accept")
makeToggle("Auto Add Items")

-- Add Best Fruit Button
local fruitBtn = Instance.new("TextButton")
fruitBtn.Size = UDim2.new(0.9, 0, 0, 30)
fruitBtn.BackgroundColor3 = Color3.fromRGB(3, 244, 202)
fruitBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
fruitBtn.Text = "Add Best Fruit"
fruitBtn.Font = Enum.Font.GothamBold
fruitBtn.TextSize = 14
fruitBtn.Parent = contentFrame
Instance.new("UICorner", fruitBtn).CornerRadius = UDim.new(0, 6)

fruitBtn.MouseButton1Click:Connect(function()
    print("Best fruit added!")
end)

-- Minimize Function
local minimized = false
local originalSize = main.Size
local minimizedSize = UDim2.new(0, 200, 0, 30)

minimizeBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    TS:Create(main, TweenInfo.new(0.3), {
        Size = minimized and minimizedSize or originalSize
    }):Play()
    contentFrame.Visible = not minimized
    bg.Visible = not minimized
end)

-- Exit Function
exitBtn.MouseButton1Click:Connect(function()
    TS:Create(main, TweenInfo.new(0.2), {
        Size = UDim2.new(0, 0, 0, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0)
    }):Play()
    task.wait(0.2)
    gui:Destroy()
end)

-- Dragging (only titleBar)
local drag = { enabled = false, start = nil, startPos = nil }
local connection

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        drag.enabled = true
        drag.start = input.Position
        drag.startPos = main.Position
        connection = input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                drag.enabled = false
                connection:Disconnect()
            end
        end)
    end
end)

UIS.InputChanged:Connect(function(input)
    if drag.enabled and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - drag.start
        main.Position = UDim2.new(
            drag.startPos.X.Scale,
            drag.startPos.X.Offset + delta.X,
            drag.startPos.Y.Scale,
            drag.startPos.Y.Offset + delta.Y
        )
    end
end)
